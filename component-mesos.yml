application:
  configuration:
    configuration.recipeUrl: "https://s3.amazonaws.com/qubell-starter-kit-artifacts/qubell-bazaar/component-mesos-cookbooks-stable-69f7d1f.tar.gz" 
    configuration.operating-system: { "image": "us-east-1/ami-d85e75b0", "identity": "ubuntu" }
    configuration.SlaveTargetQuantity: 1
  interfaces:
    configuration:
      recipeUrl: bind(master#input.recipeUrl, slave#input.recipeUrl)
      operating-system: bind(VM#configuration.operating-system,master#input.operating-system, slave#input.operating-system, zookeeper#input.operating-system, mesos-checker#input.operating-system)
      SlaveTargetQuantity: bind(VM#configuration.SlaveTargetQuantity, mesos-checker#input.SlaveTargetQuantity)
    mesos:
       mesos-urls: bind(master#result.mesos-urls)
       marathon-urls: bind(master#result.marathon-urls)
  bindings:
    - [ master, proxy ]
    - [ master, zookeeper ]
    - [ master, mesos-checker]
    - [ slave, mesos-checker]
    - [ VM, proxy]
    - [ VM, mesos-checker ]
    - [ zookeeper, proxy]
    - [ slave, proxy]
    - [ slave, zookeeper ]
  components:
    proxy:
      type: workflow.Instance
      interfaces:
        zoo:
          zoo-nodes: consume-signal(list<string>)
          zoo-hosts: consume-signal(list<string>)
        vm:
          slave-ips: consume-signal(list<string>)
        result:
          master-ips: publish-signal(list<string>)
          master-private-ips: publish-signal(list<string>)
          slave-ips: publish-signal(list<string>)
      required: [ zoo, vm ]
      configuration:
        configuration.triggers:
          vm.slave-ips: update
        configuration.propagateStatus:
          - update
        configuration.workflows:
          launch: &launch
            steps:
              - getSignals:
                  action: getSignals
                  output:
                    env: result
            return:
              master-ips:
                value: "{$.env.zoo.zoo-hosts}"
              master-private-ips: 
                value: "{$.env.zoo.zoo-nodes}"
              slave-ips:
                value: "{$.env.vm.slave-ips}"
          update: *launch
      
    VM:
      type: reference.Submodule
      configuration:
        __locator.application-id: VM
      interfaces:
        configuration:
          operating-system:
             type: configuration(map<string,object>) # It's a pin with  configuration type and value will be a map string on left side  object on right side
             suggestions:  ### Create dropdown menu  in advanced launch
                 "ubuntu1404": {image: "us-east-1/ami-d85e75b0", identity: ubuntu}
          SlaveTargetQuantity:
             type: configuration(int)
        mesos: ### combined interface for actions/output pins
          scale: 
             type: receive-command(int SlaveTargetQuantity, int destroy_count, list<string> destroy_ips)
          slave-ips:
             type: publish-signal(list<string>)
             name: Slave IPs
   
    zookeeper:
      type: reference.Submodule
      configuration:
        __locator.application-id: Zookeeper
      interfaces:
        input:
          operating-system:
             type: configuration(map<string,object>) # It's a pin with  configuration type and value will be a map string on left side  object on right side
             suggestions:  ### Create dropdown menu  in advanced launch
                 "ubuntu1404": {image: "us-east-1/ami-d85e75b0", identity: ubuntu}
        zoo: ### combined interface for actions/output pins
          zoo-nodes:
             type: publish-signal(list<string>)
             name: Zoo hosts Private IPs
          zoo-hosts:
             type: publish-signal(list<string>)
             name: Zookeeper hosts
             
    master:
      type: workflow.Instance
      interfaces:
        input:
          operating-system:
            type: configuration(map<string,object>)
            name: Compatible AMI
            suggestions:
              "Ubuntu 14.04 [us-east]": { "image": "us-east-1/ami-d85e75b0", "identity": "ubuntu" }
          recipeUrl:
            type: configuration(string)
            name: Chef recipes
        zoo:
          zoo-nodes: consume-signal(list<string>)
        vm:
          master-ips: consume-signal(list<string>)
        result:
          ips: publish-signal(list<string>)
          dns: publish-signal(list<string>)
          mesos-urls: publish-signal(list<string>)
          marathon-urls: publish-signal(list<string>)
          url-scheduler: publish-signal(list<string>)
      required: [ zoo, vm ]
      configuration:
        configuration.workflows:
          launch:
            steps:
              - getSignals:
                  action: getSignals
                  output:
                    env: result
              - provision-node: ### Here we using trick with provisioning on staticIps for getting App Server ips in default  role
                  action: provisionVms
                  phase: provision-node
                  precedingPhases: [ getSignals ]
                  parameters:
                    roleName: default
                    hardwareId: ""
                    vmIdentity: "{$.operating-system.identity}"
                    retryCount: 0
                    staticIps: "{$.env.vm.master-ips}"
              - set-hostname: &set-hostname
                    action: execrun
                    phase: post-provision
                    precedingPhases: [ provision-node ]
                    parameters:
                      isSudo: true
                      roles: [ default ]
                      command:
                          - bash
                          - "-c"
                          - |
                                hostname `curl -s http://169.254.169.254/latest/meta-data/public-hostname` &&
                                echo "`hostname -i`   `hostname`" >> /etc/hosts &&
                                hostname
                    output:
                      public-dns: stdout
              - get-zone: &get-zone
                    action: execrun
                    phase: post-provision
                    precedingPhases: [ provision-node ]
                    parameters:
                      isSudo: true
                      roles: [ default ]
                      command:
                          - bash
                          - "-c"
                          - |
                                curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone
                    output:
                      zone: stdout
              - install-mesos:
                  action: chefsolo
                  precedingPhases: [ post-provision ]
                  parameters:
                    retryCount: 3
                    roles: [ default ]
                    version: "11.16.2"
                    recipeUrl: "{$.recipeUrl}"
                    runList:
                      - recipe[qubell-mesos]
                      - recipe[mesos::install]
                      - recipe[mesos::master]
                      - recipe[qubell-mesos::mesos-dns]
                      - recipe[qubell-mesos::marathon]
                    jattrs:
                      java:
                        jdk_version: '8'
                      mesos:
                        version: '0.22.0'
                        zookeeper_exhibitor_discovery: true
                        zookeeper_exhibitor_url: "http://{$.env.zoo.zoo-nodes[0]}:8090"
                        master:
                          flags:
                            quorum: 2
                           # hostname: "{$.public-dns.*}"
                      qubell-mesos:
                        ec2_zone: "{$.zone['*'][0]}"
            return:
              ips:
                value: "{$.env.vm.master-ips}"
              dns:
                value: "{$.public-dns.*}"
              mesos-urls:
                value: "http://{$.public-dns.*}:5050"
              marathon-urls:
                value: "http://{$.public-dns.*}:8080"
              url-scheduler:
                value: "http://{$.public-dns.*}:8081"
            

    slave:
      type: workflow.Instance
      interfaces:
        input:
          operating-system:
            type: configuration(map<string,object>)
            name: Compatible AMI
            suggestions:
              "Ubuntu 14.04 [us-east]": { "ami": "us-east-1/ami-d85e75b0", "user": "ubuntu" }
          recipeUrl:
            type: configuration(string)
            name: Chef recipes
        zoo:
          zoo-nodes: consume-signal(list<string>)
        vm:
          slave-ips: consume-signal(list<string>)
          master-private-ips: consume-signal(list<string>)
        result:
          ips: publish-signal(list<string>)
          dns: publish-signal(list<string>)
          url-observer: publish-signal(list<string>)
      required: [ zoo, vm ]
      configuration:
        configuration.triggers:
          vm.slave-ips: update
        configuration.propagateStatus:
          - update
        configuration.workflows:
          launch: &launch
            steps:
              - getSignals:
                  action: getSignals
                  output:
                    env: result
              - provision-node: ### Here we using trick with provisioning on staticIps for getting App Server ips in default  role
                  action: provisionVms
                  phase: provision-node
                  precedingPhases: [ getSignals ]
                  parameters:
                    roleName: default
                    hardwareId: ""
                    vmIdentity: "{$.operating-system.identity}"
                    retryCount: 0
                    staticIps: "{$.env.vm.slave-ips}"
              - set-hostname: *set-hostname
              - get-zone: *get-zone
              - install-mesos:
                  action: chefsolo
                  precedingPhases: [ post-provision ]
                  parameters:
                    retryCount: 3
                    roles: [ default ]
                    version: "11.16.2"
                    recipeUrl: "{$.recipeUrl}"
                    runList:
                      - recipe[qubell-mesos]
                      - recipe[mesos::install]
                      - recipe[mesos::slave]
                      - recipe[qubell-mesos::set_dns]
                      - recipe[qubell-mesos::haproxy_bridge]
                    jattrs:
                      mesos:
                        version: '0.22.0'
                        zookeeper_exhibitor_discovery: true
                        zookeeper_exhibitor_url: "http://{$.env.zoo.zoo-nodes[0]}:8090"
                        slave:
                          flags:
                           # isolation: "cgroups/cpu,cgroups/mem"
                           # hostname: "{$.public-dns.*}" 
                            containerizers: "docker,mesos" # "docker,mesos"
                            executor_registration_timeout: "5mins"
                      qubell-mesos:
                          ec2_zone: "{$.zone['*'][0]}"
            return:
              ips:
                value: "{$.env.vm.slave-ips}"
              dns:
                value: "{$.public-dns.*}"
              url-observer:
                value: "http://{$.public-dns.*}:1338"
          
          update: *launch
          
    mesos-checker:
      type: workflow.Instance
      interfaces:
        input:
          operating-system:
            type: configuration(map<string,object>)
            name: Compatible AMI
            suggestions:
              "Ubuntu 14.04 [us-east]": { "image": "us-east-1/ami-d85e75b0", "identity": "ubuntu" }
          SlaveTargetQuantity: configuration(int)
        vm:
          scale: send-command(int SlaveTargetQuantity, int destroy_count, list<string> destroy_ips)
          slave-ips: consume-signal(list<string>)
        mesos:
          mesos-urls: consume-signal(list<string>)
          marathon-urls: consume-signal(list<string>)
          ips: consume-signal(list<string>)
        slave:
          url-observer: consume-signal(list<string>)
        result:
          SlaveCount: publish-signal(int)
          DestroyedSlaves: publish-signal(list<string>)
      required: [ mesos, slave ]
      configuration:
        # configuration.schedule:
        #   check: "0 0/5 * * * ? *" 
        configuration.workflows:
          launch: &launch
            steps:
              - get-signals:
                  action: getSignals
                  output:
                    signals: result
              - provision-node: ### Here we using trick with provisioning on staticIps for getting App Server ips in default  role
                  action: provisionVms
                  phase: provision-node
                  precedingPhases: [ get-signals ]
                  parameters:
                    roleName: default
                    hardwareId: ""
                    vmIdentity: "{$.operating-system.identity}"
                    retryCount: 0
                    staticIps: "{$.signals.mesos.ips}"
              - get-mesos-state:
                  action: execrun
                  precedingPhases: [ provision-node ]
                  parameters:
                    isSudo: true
                    roles: [ default ]
                    retryCount: 3
                    command:
                        - python
                        - "-c"
                        - |
                              import json
                              import urllib2
                              import httplib
                              import socket
                              conn = httplib.HTTPConnection("{$.signals.mesos.mesos-urls[0]}".split('/')[-1])
                              conn.request("HEAD", "/master/redirect")
                              res = conn.getresponse()
                              url = res.getheader("Location") + "/master/state.json"
                              response = urllib2.urlopen(url)
                              j = json.load(response)
                              MEM = j["slaves"][0]["resources"]["mem"]
                              CPU = j["slaves"][0]["resources"]["cpus"]
                              url = "{$.signals.mesos.marathon-urls[0]}/v2/queue"
                              response = urllib2.urlopen(url)
                              j2 = json.load(response)
                              SlaveCount = len(j["slaves"])
                              ips = [socket.gethostbyname(s['hostname']) for s in j['slaves'] if s['id'] not in [i['slave_id'] for t in j['frameworks'] for i in t['tasks']]]
                              ips = ips[{$.SlaveTargetQuantity}:]                              
                              for q in j2["queue"]:
                                if (q['delay']['overdue'] == True and  q['app']['mem'] <= MEM and q['app']['cpus'] <= CPU):
                                  SlaveCount += q['count']
                              print json.dumps({{'count': SlaveCount, 'ips': ips, 'destroy_count': len(ips)}})
                  output:
                    count: stdout
              - scale-slave:
                  action: vm.scale
                  precedingPhases: [ get-mesos-state ]
                  parameters:
                    commandCallTimeout: 10 minutes
                    SlaveTargetQuantity: "{$.count['*'][0]['count']}"
                    destroy_ips: "{$.count['*'][0]['ips']}"
                    destroy_count:  "{$.count['*'][0]['destroy_count']}"
            return:
              SlaveCount:
                value: "{$.count['*'][0]['count']}"
              DestroyedSlaves:
                value: "{$.count['*'][0]['ips']}"
              
          check: *launch

